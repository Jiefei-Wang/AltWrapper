% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/altWrapper-main.R
\name{setAltMethod}
\alias{setAltMethod}
\title{Define altWrapper methods}
\usage{
setAltMethod(className, inspect, getLength, getDataptr, getDataptrOrNull,
  getElement, getSubset, getRegion, duplicate, coerce, serialize,
  unserialize, isSorted, noNA, sum, min, max)
}
\arguments{
\item{className}{Character, the name of the class}

\item{inspect}{Function, see detail}

\item{getLength}{Function, see detail}

\item{getDataptr}{Function, see detail}

\item{getDataptrOrNull}{Function, see detail}

\item{getElement}{Function, see detail}

\item{getSubset}{Function, see detail}

\item{getRegion}{Function, see detail}

\item{duplicate}{Function, see detail}

\item{coerce}{Function, see detail}

\item{serialize}{Function, see detail}

\item{unserialize}{Function, see detail}

\item{isSorted}{Function, see detail}

\item{noNA}{Function, see detail}

\item{sum}{Function, see detail}

\item{min}{Function, see detail}

\item{max}{Function, see detail}
}
\value{
No return value
}
\description{
Define altWrapper methods which are
wrappers of ALTREP APIs.
}
\details{
This function defines the behavior of an altWrapper class.
The altWrapper methods are fundamentally wrappers of ALTREP APIs.
Any call to the ALTREP APIs will be converted
to a call of the corresponding altWrapper methods.

Belows are the definitions of the altWrapper methods.
\code{x} is the data of the altWrapper object.

\tabular{lll}{
\strong{Function} \tab \strong{Arguments} \tab  \strong{Return value} \cr
\code{inspect} \tab \code{x} \tab \code{A logical value}\cr
\code{getLength} \tab \code{x} \tab \code{An integer/numeric value}\cr
\code{getDataptr} \tab \code{x}, \code{writeable} \tab \code{Vector/External pointer}\cr
\code{getDataptrOrNull} \tab \code{x} \tab \code{Vector/External pointer/NULL}\cr
\code{getElement} \tab \code{x}, \code{i} \tab \code{An entry of the ALTREP vector}\cr
\code{getSubset} \tab \code{x}, \code{i} \tab \code{A subset of the ALTREP vector}\cr
\code{getRegion} \tab \code{x}, \code{start}, \code{length}, \code{output} \tab \code{Length of the true reads}\cr
\code{duplicate} \tab \code{x}, \code{deep} \tab \code{The duplicated object}\cr
\code{coerce} \tab \code{x}, \code{type} \tab \code{The coerced object}\cr
\code{serialize} \tab \code{x} \tab \code{Any R object}\cr
\code{unserialize} \tab \code{R_class}, \code{state} \tab \code{Any R object}\cr
\code{isSorted} \tab \code{x} \tab \code{An integer value}\cr
\code{noNA} \tab \code{x} \tab \code{An integer value}\cr
\code{sum} \tab \code{x}, \code{na.rm} \tab \code{An integer/numeric value}\cr
\code{min} \tab \code{x}, \code{na.rm} \tab \code{An integer/numeric value}\cr
\code{max} \tab \code{x}, \code{na.rm} \tab \code{An integer/numeric value}\cr
}

\code{inspect} function determines the output of a \code{.Internal(inspect(...))} call.
Return value = \code{FALSE} means using the default method to inspect the object.

\code{getLength} function returns the length of the ALTREP object

\code{getDataptr} function returns the data pointer of the ALTREP object.
The argument \code{writeable} means whether R will write data to the pointer.
Unlike \code{getDataptrOrNull} function. This function must return a pointer.
It is suggested to throw an error if the ALTREP object does not have a
data pointer. Please note that before R 3.7, \code{getDataptr} is the only way
to print out an ALTREP object without using \code{S3} or \code{S4} method dispatching
when the data pointer of the object is not available.

\code{getDataptrOrNull} function is similar to \code{getDataptr} function, but it can
return \code{NULL} if the data pointer is not available.

\code{getElement} function returns the value of the ALTREP vector at a given position.
The argument \code{i} is a 1-based index of the vector.

\code{getSubset} function returns a subset of the ALTREP vector.
The argument \code{i} is a 1-based subset.

\code{getRegion} function reads a continuous region of the ALTREP vector.
The argument \code{start} is the 1-based starting position of the reads.
\code{length} determines the length of the reads.
Unlike most R functions, the result of the reads should be returned via
the argument \code{output} instead of using \code{return} function. Users must use
\code{[<-} operator to change the value of the \code{output} argument. The return value
of \code{getRegion} function is the true number of reads in the \code{output} argument.
In most case the return value is the same as \code{length}, it will be different only when
\code{start + length - 1} exceeds the length of the ALTREP vector.

\code{duplicate} function duplicates the ALTREP vector. The argument \code{deep} determines
whether it is a deep copy or not. A default duplicate method will be used if the
return value is NULL.

\code{coerce} function coerces the ALTREP vector to the other data type. The
integer argument \code{type} is the index of the target type. Please refer to
\href{https://cran.r-project.org/doc/manuals/r-release/R-ints.html#SEXPTYPEs}{SEXPTYPEs}
to see the meaning of the index.

\code{serialize} function serialize the ALTREP object. The return value is called \code{state}
and will be used in \code{unserialize} function.

\code{unserialize} function unserialize the ALTREP object. The argument \code{state} is
the return value of \code{serialize} function. The argument \code{R_class} is for compatibility
only.

\code{isSorted} whether the ALTREP vector is sorted in the ascending or descending order.
The vector status can be unknown sortness, known unsorted, ascending, descending,
ascending with NA first, descending with NA first. You can find the corresponding
return values by accessing the list variable \code{altrepSortStatus}.

\code{noNA} check whether the ALTREP vector contains any NA value.
The return value must be an element of the list \code{altrepNAStatus}.

\code{sum}, \code{min} and \code{max} have the same meaning as R's corresponding functions. These
functions are only available for \code{integer} and \code{double} ALTREP class type.
}
\examples{
## Define the ALTREP functions
length_func <- function(x) length(x)
get_ptr_func <- function(x,writeable) x


## Define the altWrapper class and its functions
setAltClass(className = "example", classType = "integer")
setAltMethod(className = "example", getLength = length_func)
setAltMethod(className = "example", getDataptr = get_ptr_func)

## Create an altWrapper object by providing the class name and data.
A <- newAltrep(className = "example", x = 1L:10L)
A


}
